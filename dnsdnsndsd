[1mdiff --git a/alembic/versions/env.py b/alembic/versions/env.py[m
[1mdeleted file mode 100644[m
[1mindex d173f4d..0000000[m
[1m--- a/alembic/versions/env.py[m
[1m+++ /dev/null[m
[36m@@ -1,86 +0,0 @@[m
[31m-from logging.config import fileConfig[m
[31m-[m
[31m-from app.core.database import Base[m
[31m-from sqlalchemy import engine_from_config[m
[31m-from sqlalchemy import pool[m
[31m-[m
[31m-from alembic import context[m
[31m-[m
[31m-# Import All Models[m
[31m-from app.models import *[m
[31m-[m
[31m-from app.core.settings import get_settings[m
[31m-settings = get_settings()[m
[31m-[m
[31m-# this is the Alembic Config object, which provides[m
[31m-# access to the values within the .ini file in use.[m
[31m-config = context.config[m
[31m-config.set_main_option('sqlalchemy.url', settings.DATABASE_URI)[m
[31m-[m
[31m-# Interpret the config file for Python logging.[m
[31m-# This line sets up loggers basically.[m
[31m-if config.config_file_name is not None:[m
[31m-    fileConfig(config.config_file_name)[m
[31m-[m
[31m-# add your model's MetaData object here[m
[31m-# for 'autogenerate' support[m
[31m-# from myapp import mymodel[m
[31m-# target_metadata = mymodel.Base.metadata[m
[31m-target_metadata = Base.metadata[m
[31m-[m
[31m-# other values from the config, defined by the needs of env.py,[m
[31m-# can be acquired:[m
[31m-# my_important_option = config.get_main_option("my_important_option")[m
[31m-# ... etc.[m
[31m-[m
[31m-[m
[31m-def run_migrations_offline() -> None:[m
[31m-    """Run migrations in 'offline' mode.[m
[31m-[m
[31m-    This configures the context with just a URL[m
[31m-    and not an Engine, though an Engine is acceptable[m
[31m-    here as well.  By skipping the Engine creation[m
[31m-    we don't even need a DBAPI to be available.[m
[31m-[m
[31m-    Calls to context.execute() here emit the given string to the[m
[31m-    script output.[m
[31m-[m
[31m-    """[m
[31m-    url = config.get_main_option("sqlalchemy.url")[m
[31m-    context.configure([m
[31m-        url=url,[m
[31m-        target_metadata=target_metadata,[m
[31m-        literal_binds=True,[m
[31m-        dialect_opts={"paramstyle": "named"},[m
[31m-    )[m
[31m-[m
[31m-    with context.begin_transaction():[m
[31m-        context.run_migrations()[m
[31m-[m
[31m-[m
[31m-def run_migrations_online() -> None:[m
[31m-    """Run migrations in 'online' mode.[m
[31m-[m
[31m-    In this scenario we need to create an Engine[m
[31m-    and associate a connection with the context.[m
[31m-[m
[31m-    """[m
[31m-    connectable = engine_from_config([m
[31m-        config.get_section(config.config_ini_section, {}),[m
[31m-        prefix="sqlalchemy.",[m
[31m-        poolclass=pool.NullPool,[m
[31m-    )[m
[31m-[m
[31m-    with connectable.connect() as connection:[m
[31m-        context.configure([m
[31m-            connection=connection, target_metadata=target_metadata[m
[31m-        )[m
[31m-[m
[31m-        with context.begin_transaction():[m
[31m-            context.run_migrations()[m
[31m-[m
[31m-[m
[31m-if context.is_offline_mode():[m
[31m-    run_migrations_offline()[m
[31m-else:[m
[31m-    run_migrations_online()[m
\ No newline at end of file[m
[1mdiff --git a/alembic/versions/script.py.mako b/alembic/versions/script.py.mako[m
[1mdeleted file mode 100644[m
[1mindex 3cf5352..0000000[m
[1m--- a/alembic/versions/script.py.mako[m
[1m+++ /dev/null[m
[36m@@ -1,26 +0,0 @@[m
[31m-"""${message}[m
[31m-[m
[31m-Revision ID: ${up_revision}[m
[31m-Revises: ${down_revision | comma,n}[m
[31m-Create Date: ${create_date}[m
[31m-[m
[31m-"""[m
[31m-from typing import Sequence, Union[m
[31m-[m
[31m-from alembic import op[m
[31m-import sqlalchemy as sa[m
[31m-${imports if imports else ""}[m
[31m-[m
[31m-# revision identifiers, used by Alembic.[m
[31m-revision: str = ${repr(up_revision)}[m
[31m-down_revision: Union[str, None] = ${repr(down_revision)}[m
[31m-branch_labels: Union[str, Sequence[str], None] = ${repr(branch_labels)}[m
[31m-depends_on: Union[str, Sequence[str], None] = ${repr(depends_on)}[m
[31m-[m
[31m-[m
[31m-def upgrade() -> None:[m
[31m-    ${upgrades if upgrades else "pass"}[m
[31m-[m
[31m-[m
[31m-def downgrade() -> None:[m
[31m-    ${downgrades if downgrades else "pass"}[m
\ No newline at end of file[m
[1mdiff --git a/app/models/__init__.py b/app/models/__init__.py[m
[1mindex e69de29..ec499af 100644[m
[1m--- a/app/models/__init__.py[m
[1m+++ b/app/models/__init__.py[m
[36m@@ -0,0 +1,8 @@[m
[32m+[m[32mfrom app.models.Bebida import Bebida[m
[32m+[m[32mfrom app.models.Carne import Carne[m
[32m+[m[32mfrom app.models.Comida import Comida[m
[32m+[m[32mfrom app.models.Dulce import Dulce[m
[32m+[m[32mfrom app.models.Enlatado import Enlatado[m
[32m+[m[32mfrom app.models.Notification import Notification[m
[32m+[m[32mfrom app.models.Salsa import Salsa[m
[32m+[m[32mfrom app.models.User import User[m[41m    [m
[1mdiff --git a/docker-compose.yml b/docker-compose.yml[m
[1mindex 62d46c4..c66cc0c 100644[m
[1m--- a/docker-compose.yml[m
[1m+++ b/docker-compose.yml[m
[36m@@ -24,7 +24,7 @@[m [mservices:[m
   ports:[m
    - "8000:8000"[m
   environment:[m
[31m-   - POSTGRES_SERVER=postgres[m
[32m+[m[32m   - POSTGRES_SERVER=postgres-service[m
    - POSTGRES_PORT=${POSTGRES_PORT}[m
    - POSTGRES_DB=${POSTGRES_DB}[m
    - POSTGRES_USER=${POSTGRES_USER}[m
